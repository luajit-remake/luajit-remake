#!/usr/bin/python3

import os
import sys
import shutil
import multiprocessing
from subprocess import Popen

path = os.path.realpath(__file__)
base_dir = os.path.dirname(path)
script_name = os.path.basename(__file__)

# The version used to tag the build environment docker image, in the form of major.minor.build
# Every time the image is updated, a new version must be assigned!
#
docker_image_version_major = "0"
docker_image_version_minor = "0"
docker_image_version_build = "5"

# The DockerHub username that hosts the image
#
docker_hub_username = "haoranxu510"

# The name of the Docker image
#
docker_image_name = "ljr-build"

docker_image_tag = "v%s.%s.%s" % (docker_image_version_major, docker_image_version_minor, docker_image_version_build)

def PrintUsageGeneralAndDie():
    print('Usage: %s <make|env|update-docker|push-docker|pull-docker> [args...]' % (script_name))
    print('Options:')
    print('    make: ')
    print('        Execute the build process.')
    print('    env: ')
    print('        Launch an interactive shell in the build environment.')
    print('    update-docker:')
    print("        Update the build environment for local testing after you modify 'dockerfile/Dockerfile'. You should modify '%s' to assign it a new image version." % (script_name))
    print('    push-docker:')
    print("        Push the updated build environment (created by update-docker) to Docker Hub. Once pushed, the image associated with this tag becomes immutable.")
    print('    pull-docker:')
    print("        Pull the build environment from Docker Hub.")
    sys.exit(1)

def PrintUsageMakeAndDie():
    print('Usage: %s make <debug|testrel|release> [clean]' % (script_name))
    sys.exit(1)

def GetBuildDir():
    return os.path.join(base_dir, 'build')

def GetCCacheDir():
    return os.path.join(GetBuildDir(), 'ccache')

def GetBuildDirFlavor(flavor):
    assert(flavor == 'debug' or flavor == 'testrel' or flavor == 'release')
    return os.path.join(GetBuildDir(), flavor)

def GetGeneratedDir():
    return os.path.join(base_dir, '__generated__')

def GetGeneratedDirFlavor(flavor):
    assert(flavor == 'debug' or flavor == 'testrel' or flavor == 'release')
    return os.path.join(GetGeneratedDir(), flavor)

def CreateDirIfNotExist(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)

def CheckRemoteTagExists():
    r = os.system("docker manifest inspect %s/%s:%s >/dev/null 2>&1" % (docker_hub_username, docker_image_name, docker_image_tag))
    if (r != 0):
        return False
    else:
        return True

def CheckLocalTagExists():
    r = os.system('docker inspect --type=image %s:%s >/dev/null 2>&1' % (docker_image_name, docker_image_tag))
    if (r != 0):
        return False
    else:
        return True

def PushImageToRemoteAndDie():
    if (CheckRemoteTagExists()):
        print("[ERROR] Tag %s already existed on remote! Please update the version before pushing!" % docker_image_tag)
        sys.exit(1)

    if (not CheckLocalTagExists()):
        print("[ERROR] Local tag %s does not exist! Did you use update-docker to build the image?" % docker_image_tag)
        sys.exit(1)

    r = os.system("docker image tag %s:%s %s/%s:%s" % (docker_image_name, docker_image_tag, docker_hub_username, docker_image_name, docker_image_tag))
    assert(r == 0)

    r = os.system("docker push %s/%s:%s" % (docker_hub_username, docker_image_name, docker_image_tag))
    assert(r == 0)

    sys.exit(0)

def PullImageFromRemote():
    r = os.system("docker pull %s/%s:%s" % (docker_hub_username, docker_image_name, docker_image_tag))
    if (r != 0):
        print("[ERROR] Failed to pull image %s/%s:%s from remote." % (docker_hub_username, docker_image_name, docker_image_tag))
        sys.exit(r)

    r = os.system("docker image tag %s/%s:%s %s:%s " % (docker_hub_username, docker_image_name, docker_image_tag, docker_image_name, docker_image_tag))
    assert(r == 0)

def PullImageFromRemoteIfNeeded():
    if (not CheckLocalTagExists()):
        print('Build environment docker image %s:%s does not exist locally. Pulling from remote, this may take a while...' % (docker_image_name, docker_image_tag))
        PullImageFromRemote()

def UpdateImageAndDie():
    if (CheckRemoteTagExists()):
        print("[ERROR] Tag %s already existed on remote! If you intend to update the image, assign a new image version in '%s' script. If you intend to pull the image from remote, use pull-docker." % (docker_image_tag, script_name))
        sys.exit(1)

    docker_dir = os.path.join(base_dir, 'dockerfile')
    if not os.path.exists(os.path.join(docker_dir, 'Dockerfile')):
        print('[ERROR] Dockerfile not found!')
        sys.exit(1)

    cmd = 'docker build --tag %s:%s %s' % (docker_image_name, docker_image_tag, docker_dir)
    r = os.system(cmd)
    if (r != 0):
        print('[ERROR] Failed to build docker image, exit code = %d' % r)
        sys.exit(r)

    CreateDirIfNotExist(os.path.join(base_dir, 'shared_libs'))
    all_shared_libs = [
#        '/lib/x86_64-linux-gnu/libtinfo.so.5'
    ]
    for shared_lib in all_shared_libs:
        cmd = 'docker run -v%s:/home/u/project %s:%s cp %s /home/u/project/shared_libs' % (base_dir, docker_image_name, docker_image_tag, shared_lib)
        r = os.system(cmd)
        if (r != 0):
            print('[ERROR] Failed to copy shared library %s, exit code = %d' % (shared_lib, r))
            sys.exit(r)

    print("Build successful. You may test this image locally, and when you are satisfied, use push-docker to push the image to remote.")
    sys.exit(0)

if (len(sys.argv) < 2):
    PrintUsageGeneralAndDie()

op = sys.argv[1]

if (op != 'update-docker' and op != "push-docker" and op != "pull-docker" and op != 'env' and op != 'make'):
    print('Unknown operation "%s".' % op)
    PrintUsageGeneralAndDie()

if (op == 'env'):
    PullImageFromRemoteIfNeeded()

    cmd = "docker run -it -e CC='clang' -e CXX='clang++' -v %s:/home/u/project --workdir='/home/u/project' %s:%s" % (base_dir, docker_image_name, docker_image_tag)
    print(f"$ {cmd}")
    r = os.system(cmd)
    sys.exit(r)

if (op == "push-docker"):
    PushImageToRemoteAndDie()
    assert(False)

if (op == "pull-docker"):
    PullImageFromRemote()
    sys.exit(0)

if (op == 'update-docker'):
    UpdateImageAndDie();
    assert(False)

if (op == 'make'):
    if (len(sys.argv) < 3 or len(sys.argv) > 4):
        PrintUsageMakeAndDie()

    target = sys.argv[2]
    if (target != 'debug' and target != 'testrel' and target != 'release'):
        print('Unknown make target "%s".' % target)
        PrintUsageMakeAndDie()

    isClean = False
    if (len(sys.argv) == 4):
        if (sys.argv[3] != 'clean'):
            PrintUsageMakeAndDie()
        isClean = True

    if (isClean):
        dirname = GetBuildDirFlavor(target)
        print('Removing directory: %s' % dirname)
        shutil.rmtree(dirname)
        dirname = GetGeneratedDirFlavor(target)
        print('Removing directory: %s' % dirname)
        shutil.rmtree(dirname)
        sys.exit(0)

    PullImageFromRemoteIfNeeded()

    CreateDirIfNotExist(GetBuildDir())
    CreateDirIfNotExist(GetCCacheDir())
    CreateDirIfNotExist(GetBuildDirFlavor(target))
    CreateDirIfNotExist(GetGeneratedDir())
    CreateDirIfNotExist(GetGeneratedDirFlavor(target))
    CreateDirIfNotExist(os.path.join(GetGeneratedDirFlavor(target), 'generated'))

    # generate the git commit hash CPP file
    cmd = "docker run -e CC='clang' -e CXX='clang++' -v %s:/home/u/project %s:%s bash -c 'cd project && bash gen_git_hash.sh __generated__/%s/generated/git_commit_hash.cpp'" % (base_dir, docker_image_name, docker_image_tag, target)
    r = os.system(cmd)
    if (r != 0):
        sys.exit(r)

    cmd = "docker run -e CC='clang' -e CXX='clang++' -v %s:/home/u/project %s:%s bash -c 'cd project/build/%s && cmake ../../ -DBUILD_FLAVOR=%s -GNinja'" % (base_dir, docker_image_name, docker_image_tag, target, target.upper())
    r = os.system(cmd)
    if (r != 0):
        sys.exit(r)

    if (not os.path.exists(GetBuildDirFlavor(target))):
        print("[INTERNAL ERROR] Build directory 'build/%s' does not exist. A bug?" % target)
        sys.exit(1)

    if (isClean):
        option = "clean"
    else:
        parallelism = 1
        num_cpus = multiprocessing.cpu_count()
        if (2 <= num_cpus and num_cpus <= 4):
            parallelism = num_cpus - 1
        else:
            if (num_cpus > 4):
                parallelism = num_cpus - 2
        option = ("-j%s" % str(parallelism))
    cmd = "docker run -e CC='clang' -e CXX='clang++' -v %s:/home/u/project %s:%s bash -c 'cd project/build/%s && ninja %s'" % (base_dir, docker_image_name, docker_image_tag, target, option)
    r = os.system(cmd)
    if (r != 0):
        sys.exit(r)

    if (not isClean):
        # copy executable to project root
        print('Copying built artifact to project root directory..')
        src = os.path.join(GetBuildDirFlavor(target), "main")
        dst = os.path.join(base_dir, "main")
        p = Popen(['cp', '-p', src, dst])
        p.wait()

        src = os.path.join(GetBuildDirFlavor(target), "luajitr")
        dst = os.path.join(base_dir, "luajitr")
        p = Popen(['cp', '-p', src, dst])
        p.wait()
        print('Build completed successfully.')

    sys.exit(0)

assert(False)


